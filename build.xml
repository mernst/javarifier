<?xml version="1.0"?>
<project name="javarifier" default="bin">
  <description>
    Rules for building and testing Javarifier.
    For a list of targets, run:  ant -projecthelp
  </description>
  
  <property name="java-version" value="1.5"/>
  <property environment="env"/>

  <target name="init-properties" description="Initializes required properties">
      <condition property="exists.build.properties">
        <available file="build.properties"/>
      </condition>
      <fail
        unless="exists.build.properties" 
        message="Local build.properites file is missing."/>
      <property file="build.properties"/>
      
      <fail 
        unless="global.build.properties" 
        message="Local build.properties file did not define global buildfile in property global.build.properties"/>
      <condition property="exists.global.build.properties">
        <available file="${global.build.properties}"/>
      </condition>
      <fail 
        unless="exists.global.build.properties"
        message="File ${global.build.properties} file not found."/>      
      <property file="${global.build.properties}"/>

      <fail 
        unless="user.build.properties" 
        message="Local build.properties file did not define global buildfile in property user.build.properties"/>
      <condition property="exists.user.build.properties">
        <available file="${user.build.properties}"/>
      </condition>
      <fail 
        unless="exists.user.build.properties"
        message="File ${user.build.properties} file not found."/>      
      <property file="${user.build.properties}"/>

      <path id="sourcepath">
        <pathelement location="src"/>
      </path>
    
      <path id="javadoc-sourcepath">
        <pathelement location="src"/>
      </path>
              
      <path id="libpath">
        <pathelement location="${javari-annotated-jdk}/bin"/>
<!--        <pathelement location="${annotations-shared}/bin"/> -->
        <pathelement location="${checkers}/build"/>  
        <pathelement location="${annotations-compiler}/dist/lib/javac.jar"/>
        <pathelement location="${asmx}/bin"/>
        <pathelement location="${scene-lib}/bin"/>
        <pathelement location="${javarifier}/bin"/>
        <pathelement location="${javarifier}/lib/jasminclasses-2.2.3.jar"/>
        <pathelement location="${javarifier}/lib/polyglotclasses-1.3.2.jar"/>
        <pathelement location="${javarifier}/lib/sootclasses-2.2.3.jar"/>
      </path>
  </target>
    
  <target name="init-dependencies" depends="init-properties"
    description="Builds all projects this depends on">
<!--      <ant dir="${annotations-shared}" target="bin"/> -->
      <ant dir="${scene-lib}" target="bin"/>
      <ant dir="${asmx}" target="bin"/>
      <ant dir="${annotations-compiler}" antfile="make/build.xml" 
          inheritAll="false" target="build"/>
      <ant dir="${checkers}" target="build"/>
  </target>
    
  <target name="init" depends="init-properties, init-dependencies"
    description="Initializes properties and builds all required projects">
  </target>
  
  <target name="clean" description="Cleans output files">
    <delete dir="bin"/>
  </target>
  
  <target name="bin" depends="clean, init" 
    description="Compiles Javarifier classes">
    <mkdir dir="bin"/>
    <copy todir="bin">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
    <javac destdir="bin" source="${java-version}" target="${java-version}">
      <src refid="sourcepath"/>
      <classpath refid="libpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-g"/>
    </javac>
  </target>

  <target name="run-tests" depends="init-properties"
    description="Runs Javarifier test cases">
    <exec dir="${javarifier}/tests" executable="make"/>
  </target>

  <target name="etags" depends="tags">
  </target>
  <target name="tags" description="Create Emacs TAGS table">
    <exec executable="/bin/sh">
      <arg value="-c"/>
      <arg value="etags `find src -name '*.java' | sort-directory-order.pl`"/>
    </exec>
  </target>

  <!-- TODO: fix dependencies so that this task will build Javarifier 
       as needed. -->
  <target name="javarify" depends="init-properties"
    description="Runs Javarifier.  (Arguments: class names to javarify)">

    <property name="soot-programs" value="${user-soot-programs}:."/>
    <property name="soot-stubs" value="${user-soot-stubs}:${checkers}/build"/>
    <property name="soot-worlds" value="${user-soot-worlds}:${jre1.6.0}"/>

     <!-- Set classpath of Javarifier to use for running Javarifier, not 
          the classpath to search when analyzing. -->

     <java classname="javarifier.Main" classpathref="libpath" fork="yes">
      <assertions>
        <enable/>
      </assertions>
     
       <!-- Needed to javarify large programs. -->
       <jvmarg value="-Xmx512m"/>
      
      <!-- Soot's classpath options. -->
      <arg line="-programCPEntries ${soot-programs}"/>
      <arg line="-defaultStubCPEntries ${soot-stubs}"/>
      <arg line="-defaultWorldCPEntries ${soot-worlds}"/>
  
       <!-- The user's args is just the name of class to javarify. -->
       <arg line="${user-args}"/>    
     </java>
  </target>
</project>
