import checkers.javari.quals.ReadOnly;
import checkers.javari.quals.Mutable;
public class CellClient2<S extends /*mutable*/ CellClient2.@Mutable Day> {

    public static class Cell<T extends java.lang.@ReadOnly Object> {
	public @ReadOnly T val;
	public @ReadOnly T getVal(CellClient2.@ReadOnly Cell<T> this) { return val; }
	public void setVal(CellClient2.@Mutable Cell<T> this, @ReadOnly T val) { this.val = val; }
    }

    public static class Day {
        public int day;
        public Day(CellClient2.@ReadOnly Day this) { }
        public Day(CellClient2.@ReadOnly Day this, int d) { this.day = d; }
        public int getDay(CellClient2.@ReadOnly Day this) { return day; }
        public void setDay(CellClient2.@Mutable Day this, int d) { this.day = d; }
    }

    private /*this-mutable*/ Cell<@ReadOnly S> f;

    public CellClient2(S t) {
        f = new Cell<S>();
        f.setVal(t);
    }

    public /*readonly*/ @ReadOnly Cell<@ReadOnly S> getF(@ReadOnly CellClient2<S> this) {
        return f;
    }

    public void foo(@ReadOnly CellClient2<S> this) {
        /*readonly*/ @ReadOnly Cell<@ReadOnly S> tmp = getF();
        /*mutable*/ @Mutable Day d = tmp.getVal();
        d.setDay(2);
    }

    public void setDay(S t) {
        f.setVal(t);
    }
}
