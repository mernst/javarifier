import checkers.javari.quals.Mutable;
import checkers.javari.quals.PolyRead;
import checkers.javari.quals.ReadOnly;
public class StaticMethods {

    public static class Cell<T extends java.lang.@ReadOnly Object> {
	public @ReadOnly T val;
	public @ReadOnly T getVal(StaticMethods.@ReadOnly Cell<T> this) { return val; }
	public void setVal(StaticMethods.@Mutable Cell<T> this, @ReadOnly T val) { this.val = val; }
    }

    public static class Day {
        public int day;
        public @ReadOnly Day() { }
        public @ReadOnly Day(int d) { this.day = d; }
        public int getDay(StaticMethods.@ReadOnly Day this) { return day; }
        public void setDay(StaticMethods.@Mutable Day this, int d) { this.day = d; }
    }

    public static /*romaybe*/ @PolyRead Day id(/*romaybe*/ @PolyRead Day d) {
        return d;
    }

    public static void foo(/*mutable*/ @Mutable Day x) {
        id(x).setDay(3);
    }

    public static /*mutable*/ @Mutable Cell</*mutable*/ @Mutable Day> baz() {
        return new Cell<Day>();
    }

    public static void quax() {
        baz().setVal(new Day());
        baz().getVal().setDay(3);
    }


}
