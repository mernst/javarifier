package checkers.javari.quals:
annotation @ReadOnly: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package checkers.javari.quals:
annotation @Mutable: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package :
class InnerClassTest:
    bound ,0 &0: @checkers.javari.quals.ReadOnly

    field d:
        type: @checkers.javari.quals.ReadOnly

    field in:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.ReadOnly

    field initializedField:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    field staticInitializedField:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+17:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method foo()LInnerClassTest$AIn;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+7:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 1 #5+2:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
                inner-type 1: @checkers.javari.quals.ReadOnly

    method factory()LInnerClassTest$Cell;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+9:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method staticFactory()LInnerClassTest$Cell;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <clinit>()V:
        return:

package :
class InnerClassTest$1:
    bound ,0 &0: @checkers.javari.quals.ReadOnly

    field this$0:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(LInnerClassTest;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 0 #0+10:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method initializedFieldFoo()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package :
class InnerClassTest$2:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

    method staticInitializedFieldFoo()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+1:
            type: @checkers.javari.quals.ReadOnly

package :
class InnerClassTest$3:
    bound ,0 &0: @checkers.javari.quals.ReadOnly

    field this$0:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(LInnerClassTest;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 0 #0+10:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method factoryFoo()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method var()Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+2:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package :
class InnerClassTest$4:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

    method factoryFoo()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+1:
            type: @checkers.javari.quals.ReadOnly

package :
class InnerClassTest$AIn:
    bound ,0 &0: @checkers.javari.quals.ReadOnly
    bound ,1 &0: @checkers.javari.quals.ReadOnly

    field f:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    field sf:
        type: @checkers.javari.quals.ReadOnly

    field this$0:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(LInnerClassTest;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 0 #0+10:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
                inner-type 1: @checkers.javari.quals.ReadOnly

package :
class InnerClassTest$Cell:
    bound ,0 &0: @checkers.javari.quals.ReadOnly

    field val:
        type: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getVal()Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method setVal(Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        local 0 #0+6:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 1 #0+6:
            type: @checkers.javari.quals.ReadOnly

package :
class InnerClassTest$Day:

    field day:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

    method <init>(I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        local 0 #0+10:
            type: @checkers.javari.quals.Mutable
        local 1 #0+10:

    method getDay()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

    method setDay(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        local 0 #0+6:
            type: @checkers.javari.quals.Mutable
        local 1 #0+6:

package :
class InnerClassTest$Inner:
    bound ,0 &0: @checkers.javari.quals.ReadOnly

    field c:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    field this$0:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(LInnerClassTest;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 0 #0+10:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

package :
class InnerClassTest$Nested:

    field c:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

