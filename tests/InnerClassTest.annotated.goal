import checkers.javari.quals.ReadOnly;
import checkers.javari.quals.Mutable;

public class InnerClassTest<S extends java.lang.@ReadOnly Object> {

    public static class Cell<T extends java.lang.@ReadOnly Object> {
	public @ReadOnly T val;
	public @ReadOnly T getVal(@ReadOnly Cell<T> this) { return val; }
	public void setVal(@Mutable Cell<T> this, @ReadOnly T val) { this.val = val; }
    }

    public static class Day {
        public int day;
        public Day(@ReadOnly Day this) { }
        public Day(@ReadOnly Day this, int d) { this.day = d; }
        public int getDay(@ReadOnly Day this) { return day; }
        public void setDay(@Mutable Day this, int d) { this.day = d; }
    }

    @ReadOnly Day d;

    // $AIn
    public class AIn<T extends java.lang.@ReadOnly Object> {
        public AIn() {

        }
        @ReadOnly Cell<@ReadOnly T> f;
        public @ReadOnly S sf;
    }

    @ReadOnly AIn<@ReadOnly Day> in;

    public @ReadOnly AIn<@ReadOnly Day> foo(@ReadOnly InnerClassTest<S> this) {
        //InnerClassTest<Day> i = new InnerClassTest<Day>();
        InnerClassTest<@ReadOnly @ReadOnly S>.AIn<Day> x = this.in;
        return x;
    }

    // $Inner
    public class Inner {
        @ReadOnly Cell<@ReadOnly Day> c;
    }

    // $Nested static
    public static class Nested {
        @ReadOnly Cell<@ReadOnly Day> c;
    }


    // $1
    @ReadOnly Cell<@ReadOnly Day> initializedField = new Cell<Day>() {
        public void initializedFieldFoo() {}
    };



    // $2 static
    static @ReadOnly Cell<@ReadOnly Day> staticInitializedField = new Cell<Day>() {
        public void staticInitializedFieldFoo() {}
    };

    // $3
    @ReadOnly Cell<@ReadOnly Day> factory(@ReadOnly InnerClassTest<S> this) {
        return new Cell<Day>() {
            public void factoryFoo() {}
            public @ReadOnly S var() { return null; }
        };
    }

    // $4 static
    static @ReadOnly Cell<@ReadOnly Day> staticFactory() {
        return new Cell<Day>() {
            public void factoryFoo() {}
        };
    }
}
