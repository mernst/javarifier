package checkers.javari.quals:
annotation @ReadOnly: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package checkers.javari.quals:
annotation @Mutable: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package :
class CellClient:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

    method foo()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+22:
            type: @checkers.javari.quals.ReadOnly
        local 1 #8+14:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 2 #16+6:
            type: @checkers.javari.quals.ReadOnly
        local 3 #21+1:

    method bar()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+37:
            type: @checkers.javari.quals.ReadOnly
        local 1 #8+29:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 2 #16+21:
            type: @checkers.javari.quals.ReadOnly
        local 3 #21+16:
        local 4 #30+7:
            type: @checkers.javari.quals.ReadOnly

    method baz()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+22:
            type: @checkers.javari.quals.ReadOnly
        local 1 #8+14:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.Mutable
        local 2 #16+6:
            type: @checkers.javari.quals.Mutable

    method quax()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+35:
            type: @checkers.javari.quals.ReadOnly
        local 1 #8+27:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        local 2 #16+19:
            type: @checkers.javari.quals.Mutable
        local 3 #29+6:
            type: @checkers.javari.quals.Mutable

package :
class CellClient$Cell:
    bound 0 &0: @checkers.javari.quals.ReadOnly

    field val:
        type: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getVal()Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method setVal(Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        local 0 #0+6:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        local 1 #0+6:
            type: @checkers.javari.quals.ReadOnly

package :
class CellClient$Day:

    field day:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

    method <init>(I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        local 0 #0+10:
            type: @checkers.javari.quals.Mutable
        local 1 #0+10:

    method getDay()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        local 0 #0+5:
            type: @checkers.javari.quals.ReadOnly

    method setDay(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        local 0 #0+6:
            type: @checkers.javari.quals.Mutable
        local 1 #0+6:

